---
- hosts: all
  vars:
    certfiles: [{src: 'fullchain.pem', dst: 'cert.pem'},{src: 'privkey.pem', dst: 'privkey.pem'}]
  roles:
  - role: jnv.unattended-upgrades
    become: yes
    unattended_origins_patterns:
    - 'origin=Debian,codename=${distro_codename},label=Debian-Security' # security updates
    - 'o=Debian,codename=${distro_codename},label=Debian' # updates including non-security updates
    - 'o=Debian,codename=${distro_codename},a=proposed-updates'
    unattended_mail: "{{ unattended_email }}"

  - role: geerlingguy.docker
    become: yes

  - role: geerlingguy.certbot
    become: yes
    certbot_create_if_missing: true
    certbot_create_method: standalone
    certbot_admin_email: "{{ cert_email }}"
    # the role is dummy and needs anyway a service to stop, so I choosed: "ntp"
    certbot_create_standalone_stop_services: ntp
    certbot_certs:
     - domains: "{{ cert_domains }}"
  - role: andrewrothstein.docker-compose

  tasks:
  - name: Replace domain
    lineinfile:
      path: /etc/hosts
      regexp: '^(.*)novalocal(.*)$'
      line: '\1{{ main_domain }}\2'
      backrefs: yes

  # reload domain to ansible var
  - name: Setup
    setup:

  - name: Upgrade all packages to the latest version
    become: yes
    apt:
      name: "*"
      state: latest

  - name: Remove useless packages from the cache
    become: yes
    apt:
      autoclean: yes

  - name: Remove dependencies that are no longer required
    become: yes
    apt:
      autoremove: yes

  - name: install packages
    become: yes
    apt:
      name: "{{ item }}"
      state: latest
      update_cache: yes
    with_items:
      - git
      - vim
      - ferm
      - fail2ban

  - name: ferm config
    copy:
      src: ferm.conf
      dest: /etc/ferm/ferm.conf
    notify:
    - restart ferm

  - name: cleanup mm directory
    file:
      state: absent
      path: "mm"

  - name: docker clean mm container
    become: yes
    shell: "docker-compose down"
    args:
      chdir: "/home/{{ ansible_user }}/mm"
      executable: /bin/bash
    ignore_errors: yes

  - name: "git clone mm branch {{ mm_branch }}"
    git:
      repo: 'https://github.com/misi/mm.git'
      dest: /home/debian/mm
      version: "{{ mm_branch }}"

# Customize Config

# Certs
  - name: Copy certs
    become: yes
    copy:
      src: "/etc/letsencrypt/live/{{ ansible_fqdn }}/{{ item.src }}"
      dest: "mm/certs/{{ item.dst }}"
      remote_src: yes      
    with_items: "{{ certfiles }}"

# Logo
  - name: copy logo
    copy:
      src: logo.svg
      dest: mm/images/logo.svg

  - name: Setup logo
    lineinfile:
      path: "mm/configs/app/config.js"
      backrefs: yes
      regexp: "^(.*)// (logo.*)$"
      line: '\1\2'

  - name: Setup fqdn
    lineinfile:
      path: "mm/configs/app/config.js"
      backrefs: yes
      regexp: "^(.*multipartyServer : ')fqdn(',)$"
      line: '\1{{ ansible_fqdn }}\2'

# TURN
  - name: Setup turnserver uri
    lineinfile:
      path: "{{ item }}"
      backrefs: yes
      regexp: "^(.*)turn:example.com:443\\?transport=tcp(.*)$"
      line: '\1{{ turn_uri }}\2'
    with_items:
      - mm/configs/app/config.js
      - mm/configs/server/config.js

  - name: Setup turn user
    lineinfile:
      path: "{{ item }}"
      backrefs: yes
      regexp: "^(.*username.*)example(.*)$"
      line: '\1{{ turn_user }}\2'
    with_items:
      - mm/configs/app/config.js
      - mm/configs/server/config.js

  - name: Setup turn password
    lineinfile:
      path: "{{ item }}"
      backrefs: yes
      regexp: "^(.*credential.*)example(.*)$"
      line: '\1{{ turn_password }}\2'
    with_items:
      - mm/configs/app/config.js
      - mm/configs/server/config.js

# Enable login
  - name: Enable login
    lineinfile:
      path: "mm/configs/{{ item.cfg }}/config.js"
      backrefs: yes
      regexp: "^(.*{{ item.name }}.*: )(.*)$"
      line: '\1 {{ item.value }},'
    with_items:
      - { name : "loginEnabled",  value: "true", cfg: "app" }
      - { name : "issuerURL",  value: "'{{ issuer_url }}'", cfg: "server"  }
      - { name : "client_id",  value: "'{{ client_id }}'", cfg: "server"  }
      - { name : "client_secret",  value: "'{{ client_secret }}'", cfg: "server"  }
      - { name : "redirect_uri",  value: "'{{ redirect_uri }}'", cfg: "server"  }
    when:
      login_enabled == true

# Setup Cookie Secret
  - name: Setup Cookie Secret
    lineinfile:
      path: "mm/configs/server/config.js"
      backrefs: yes
      regexp: "^(.*cookieSecret.*: )(.*)$"
      line: '\1  "{{ cookie_secret }}" ,'

# pull lastest image
  - name: install python-docker package
    become: yes
    apt:
      name: "python-docker"
      state: latest

  - name: "pull docker image mm:{{mm_tag}}"
    docker_image:
      name: misi/mm
      tag: "{{mm_tag}}"
      force: yes

# Run container
  - name: Run mm container
    become: yes
    shell: docker compose up
    args:
      chdir: "/home/{{ ansible_user }}/mm"
      executable: /bin/bash
  
  - name: Add cert renew hook.
    lineinfile:
      path: "/etc/letsencrypt/renewal/{{ ansible_fqdn }}.conf"      
      line: '{{ item.line }}'
      regexp: '{{ item.regexp }}'
      insertafter: EOF      
    with_items:
      - { line: "pre_hook = systemctl stop docker",   regexp: "^pre_hook.*$"  }
      - { line: "post_hook = systemctl start docker", regexp: "^post_hook.*$" }

  - name: Add cert copy script to renew post hook
    become: yes
    template:
      src: cert-renew.j2
      dest: /etc/letsencrypt/renewal-hooks/post/mm.sh
      owner: root
      group: root
      mode: 0755

  handlers:
  - name: restart ferm
    service:
      name: ferm
      state: restarted
